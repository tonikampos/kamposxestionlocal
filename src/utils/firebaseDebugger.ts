// Utilidad para diagnosticar problemas de conectividad con Firebase

import { db } from '../firebase/config';
import { ref, get } from 'firebase/database';
import { realtimeDatabaseManager } from '../firebase/realtimeDatabaseManager';

export class FirebaseDebugger {
  static async runDiagnostics() {
    console.log('üîç Iniciando diagn√≥sticos de Firebase...');
    
    const results = {
      connectivity: false,
      permissions: false,
      database: false,
      config: false,
      dataAccess: false
    };
    
    try {
      // 1. Verificar configuraci√≥n b√°sica
      console.log('1Ô∏è‚É£ Verificando configuraci√≥n...');
      if (db) {
        results.config = true;
        console.log('‚úÖ Firebase Database configurado correctamente');
      } else {
        console.log('‚ùå Firebase Database no configurado');
        return results;
      }
      
      // 2. Verificar conectividad
      console.log('2Ô∏è‚É£ Verificando conectividad...');
      const connectivityTest = await realtimeDatabaseManager.verifyConnectivity();
      results.connectivity = connectivityTest;
      if (connectivityTest) {
        console.log('‚úÖ Conectividad Firebase OK');
      } else {
        console.log('‚ùå Problemas de conectividad Firebase');
      }
      
      // 3. Verificar permisos
      console.log('3Ô∏è‚É£ Verificando permisos...');
      const permissionsTest = await realtimeDatabaseManager.verifyPermissions();
      results.permissions = permissionsTest;
      if (permissionsTest) {
        console.log('‚úÖ Permisos Firebase OK');
      } else {
        console.log('‚ùå Problemas de permisos Firebase');
      }
      
      // 4. Verificar acceso a base de datos
      console.log('4Ô∏è‚É£ Verificando acceso a datos...');
      try {
        const testRef = ref(db, 'test');
        await get(testRef);
        results.database = true;
        console.log('‚úÖ Acceso a base de datos OK');
      } catch (error) {
        console.log('‚ùå Error de acceso a base de datos:', error);
      }
      
      // 5. Verificar acceso a datos espec√≠ficos (asignaturas)
      console.log('5Ô∏è‚É£ Verificando datos de asignaturas...');
      try {
        const asignaturas = await realtimeDatabaseManager.getAsignaturasByProfesor('test');
        results.dataAccess = true;
        console.log('‚úÖ Acceso a datos espec√≠ficos OK');
      } catch (error) {
        console.log('‚ùå Error de acceso a datos espec√≠ficos:', error);
      }
      
    } catch (error) {
      console.error('Error general en diagn√≥sticos:', error);
    }
    
    console.log('üìä Resultados de diagn√≥sticos:', results);
    return results;
  }
  
  static async testNotasFunctionality(alumnoId: string, asignaturaId: string) {
    console.log('üß™ Probando funcionalidad de notas...');
    
    try {
      // Verificar si existe la asignatura
      console.log('Verificando asignatura...');
      const asignatura = await realtimeDatabaseManager.getAsignaturaById(asignaturaId);
      if (!asignatura) {
        console.error('‚ùå Asignatura no encontrada');
        return false;
      }
      console.log('‚úÖ Asignatura encontrada:', asignatura.nome);
      
      // Verificar configuraci√≥n de evaluaci√≥n
      if (!asignatura.configuracionAvaliacion) {
        console.error('‚ùå Asignatura sin configuraci√≥n de evaluaci√≥n');
        return false;
      }
      console.log('‚úÖ Configuraci√≥n de evaluaci√≥n presente');
      
      // Intentar obtener notas del alumno
      console.log('Obteniendo notas del alumno...');
      const notas = await realtimeDatabaseManager.getNotaAlumno(alumnoId, asignaturaId);
      if (notas) {
        console.log('‚úÖ Notas encontradas:', notas.id);
      } else {
        console.log('‚ÑπÔ∏è No se encontraron notas, intentando inicializar...');
        const notasInicializadas = await realtimeDatabaseManager.initNotaAlumno(alumnoId, asignaturaId);
        if (notasInicializadas) {
          console.log('‚úÖ Notas inicializadas correctamente:', notasInicializadas.id);
        } else {
          console.error('‚ùå Error al inicializar notas');
          return false;
        }
      }
      
      console.log('‚úÖ Funcionalidad de notas OK');
      return true;
    } catch (error) {
      console.error('‚ùå Error en prueba de funcionalidad de notas:', error);
      return false;
    }
  }
}
